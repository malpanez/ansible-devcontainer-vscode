---
name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  ANSIBLE_FORCE_COLOR: "1"
  PYTHON_VERSION: "3.12"
  GO_VERSION: "1.22"

jobs:
  lint:
    name: Lint and Syntax Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v7

      - name: Install dependencies
        run: |
          uv pip install --system --requirement requirements.txt

      - name: Run yamllint
        run: yamllint .

      - name: Run ansible-lint
        run: ansible-lint --profile production

      - name: Ansible syntax check
        run: |
          for playbook in playbooks/*.yml; do
            ansible-playbook "$playbook" --syntax-check
          done

  test-playbooks:
    name: Test Playbooks
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v7

      - name: Install dependencies
        run: |
          uv pip install --system --requirement requirements.txt
          ansible-galaxy collection install -r requirements.yml

      - name: Run test playbook
        run: ansible-playbook playbooks/test-environment.yml

  golang-ci:
    name: Golang CI
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Skip (no go.mod)
        if: ${{ hashFiles('**/go.mod') == '' }}
        run: echo "No go.mod found; skipping Go steps."

      - name: Set up Go
        if: ${{ hashFiles('**/go.mod') != '' }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Check gofmt
        if: ${{ hashFiles('**/go.mod') != '' }}
        run: |
          fmt_output=$(gofmt -l .)
          if [[ -n "${fmt_output}" ]]; then
            echo "The following files need gofmt:"
            echo "${fmt_output}"
            exit 1
          fi

      - name: Run go vet
        if: ${{ hashFiles('**/go.mod') != '' }}
        run: |
          if go list ./... >/dev/null 2>&1; then
            go vet ./...
          else
            echo "No Go packages to vet."
          fi

      - name: Run go test
        if: ${{ hashFiles('**/go.mod') != '' }}
        run: |
          if go list ./... >/dev/null 2>&1; then
            go test ./...
          else
            echo "No Go packages to test."
          fi

  terraform-ci:
    name: Terraform Checks
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Run Terraform validation
        run: ./scripts/run-terraform-tests.sh

  devcontainer-podman:
    name: Devcontainer Build (Podman)
    needs: lint
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, ubuntu-24.04]

    env:
      DOCKER_HOST: tcp://127.0.0.1:8080
      DEVCONTAINER_CONTAINER_ENGINE: podman

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Cache Dev Containers CLI
        uses: actions/cache@v4
        with:
          path: ~/.npm-global
          key: devcontainers-cli-${{ runner.os }}-${{ hashFiles('scripts/package-lock.ci.json') }}
          restore-keys: |
            devcontainers-cli-${{ runner.os }}-

      - name: Build Dev Containers with Podman
        run: |
          set -euo pipefail
          export NPM_CONFIG_PREFIX="$HOME/.npm-global"
          export PATH="$HOME/.npm-global/bin:$PATH"
          sudo apt-get update
          sudo apt-get install -y podman
          npm install --global @devcontainers/cli
          sudo podman system service --time=0 tcp:127.0.0.1:8080 &
          PODMAN_SERVICE_PID=$!
          trap "sudo kill $PODMAN_SERVICE_PID" EXIT
          sleep 5
          ./scripts/check-devcontainer.sh
          ./scripts/debug-devcontainer.sh --stack ansible -- ./scripts/run-smoke-tests.sh

  devcontainer-docker:
    name: Devcontainer Build (Docker)
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Prepare Dev Containers CLI
        run: |
          set -euo pipefail
          export NPM_CONFIG_PREFIX="$HOME/.npm-global"
          npm install --global @devcontainers/cli
          echo "$HOME/.npm-global/bin" >> $GITHUB_PATH

      - name: Build Dev Containers with Docker
        env:
          DOCKER_HOST: unix:///var/run/docker.sock
        run: |
          set -euo pipefail
          ./scripts/check-devcontainer.sh
          ./scripts/debug-devcontainer.sh --stack ansible -- ./scripts/run-smoke-tests.sh

  dockerfile-lint:
    name: Dockerfile Lint
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install hadolint
        run: |
          set -euo pipefail
          curl -sSfL https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64 \
            -o "$RUNNER_TEMP/hadolint"
          chmod +x "$RUNNER_TEMP/hadolint"
          sudo mv "$RUNNER_TEMP/hadolint" /usr/local/bin/hadolint

      - name: Lint Dockerfiles with hadolint
        run: |
          set -euo pipefail
          mkdir -p reports
          mapfile -t dockerfiles < <(find devcontainers .devcontainer -name Dockerfile | sort)
          if [[ ${#dockerfiles[@]} -eq 0 ]]; then
            echo "No Dockerfiles found" >&2
            exit 0
          fi
          hadolint -f sarif "${dockerfiles[@]}" > reports/hadolint.sarif

      - name: Upload hadolint SARIF
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: reports/hadolint.sarif

  script-lint:
    name: Script Lint
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install shellcheck
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck

      - name: Lint shell scripts
        run: |
          set -euo pipefail
          find scripts -name '*.sh' -print0 | xargs -0 -r shellcheck

      - name: Lint PowerShell scripts
        shell: pwsh
        run: |
          Install-Module PSScriptAnalyzer -Scope CurrentUser -Force
          Invoke-ScriptAnalyzer -Path 'scripts/bootstrap-windows.ps1' -Recurse -Severity Warning -ErrorAction Stop

  container-smoke:
    name: Devcontainer Smoke Tests
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        stack: [base, ansible, terraform, golang]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and smoke test ${{ matrix.stack }} image
        env:
          STACK_NAME: ${{ matrix.stack }}
        run: |
          set -euo pipefail
          ./scripts/smoke-devcontainer-image.sh --stack "${STACK_NAME}" --build --image "devcontainer-${STACK_NAME}:ci"

      - name: Prepare SARIF directory
        run: mkdir -p reports

      - name: Trivy scan ${{ matrix.stack }} image
        uses: aquasecurity/trivy-action@0.33.1
        with:
          image-ref: devcontainer-${{ matrix.stack }}:ci
          severity: CRITICAL,HIGH
          ignore-unfixed: true
          format: sarif
          output: reports/trivy-${{ matrix.stack }}.sarif

      - name: Upload Trivy SARIF (${{ matrix.stack }})
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: reports/trivy-${{ matrix.stack }}.sarif

  windows-bootstrap:
    name: Windows Bootstrap Lint
    runs-on: windows-latest
    needs: script-lint

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install PSScriptAnalyzer
        shell: pwsh
        run: |
          Install-Module PSScriptAnalyzer -Scope CurrentUser -Force

      - name: Run PSScriptAnalyzer
        shell: pwsh
        run: |
          Invoke-ScriptAnalyzer -Path 'scripts/bootstrap-windows.ps1' -Recurse -Severity Warning -ErrorAction Stop

      - name: Dry run bootstrap script
        shell: pwsh
        run: |
          Set-StrictMode -Version Latest
          ./scripts/bootstrap-windows.ps1 `
            -Distribution 'Ubuntu' `
            -SkipGit `
            -SkipWSL `
            -InstallDockerDesktop:$false `
            -InstallPodmanDesktop:$false `
            -InstallVSCode:$false

  scenario-tests:
    name: Scenario Tests
    runs-on: ubuntu-latest
    needs: container-smoke

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Run Terraform Proxmox scenario
        run: ./scripts/scenarios/run-terraform-proxmox.sh

      - name: Run LaTeX résumé scenario
        run: ./scripts/scenarios/run-latex-cv.sh

  devcontainer-ghcr:
    name: Devcontainer GHCR Smoke
    runs-on: ubuntu-latest
    needs: scenario-tests
    if: github.ref == 'refs/heads/main'
    strategy:
      fail-fast: false
      matrix:
        stack: [ansible, terraform, golang, latex]

    env:
      DEVCONTAINER_PREFER_LOCAL_BUILD: "false"

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Dev Containers CLI
        run: |
          set -euo pipefail
          export NPM_CONFIG_PREFIX="$HOME/.npm-global"
          npm install --global @devcontainers/cli
          echo "$HOME/.npm-global/bin" >> "$GITHUB_PATH"

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run devcontainer up using GHCR image
        env:
          WORKSPACE_FOLDER: devcontainers/${{ matrix.stack }}
        run: |
          set -euo pipefail
          devcontainer up --workspace-folder "$WORKSPACE_FOLDER"
          devcontainer exec \
            --workspace-folder "$WORKSPACE_FOLDER" \
            -- bash -lc "echo '${{ matrix.stack }} image healthy'"
          devcontainer stop --workspace-folder "$WORKSPACE_FOLDER"
  ansible-test:
    name: Ansible Test
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v7

      - name: Install dependencies
        run: |
          uv pip install --system --requirement requirements.txt

      - name: Run ansible-test sanity
        env:
          ANSIBLE_TEST_PYTHON_VERSION: ${{ env.PYTHON_VERSION }}
        run: ./scripts/run-ansible-tests.sh

  unit-tests:
    name: Python Unit Tests
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v7

      - name: Install dependencies
        run: |
          uv pip install --system --requirement requirements.txt

      - name: Run pytest
        run: pytest tests

  health-check:
    name: Playbook Check Mode
    runs-on: ubuntu-latest
    needs: test-playbooks

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v7

      - name: Install dependencies
        run: |
          uv pip install --system --requirement requirements.txt
          ansible-galaxy collection install -r requirements.yml

      - name: Check setup playbook
        run: ansible-playbook playbooks/setup-workspace.yml --check

  molecule:
    name: Molecule Matrix
    runs-on: ubuntu-latest
    needs: health-check
    strategy:
      fail-fast: false
      matrix:
        include:
          - distro: debian12
            image: geerlingguy/docker-debian12-ansible:latest
          - distro: ubuntu2204
            image: geerlingguy/docker-ubuntu2204-ansible:latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v7

      - name: Install dependencies
        run: |
          uv pip install --system --requirement requirements.txt
          ansible-galaxy collection install -r requirements.yml

      - name: Run Molecule tests
        run: |
          molecule test --scenario-name default
          molecule test --scenario-name latex
        env:
          MOLECULE_DISTRO: ${{ matrix.distro }}
          MOLECULE_IMAGE: ${{ matrix.image }}

  build-container:
    name: Build Dev Container
    runs-on: ubuntu-latest
    needs:
      - lint
      - test-playbooks
      - health-check
      - molecule
      - ansible-test
      - unit-tests
      - terraform-ci
      - devcontainer-podman
      - devcontainer-docker

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Dev Container
        uses: devcontainers/ci@v0.3
        with:
          imageName: ghcr.io/${{ github.repository }}
          cacheFrom: ghcr.io/${{ github.repository }}
          push: never

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Run Trivy security scanner
        uses: aquasecurity/trivy-action@0.33.1
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
