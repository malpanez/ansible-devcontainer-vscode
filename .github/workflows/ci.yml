---
name: CI Pipeline

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  pull_request:
    branches: [main, develop]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  ANSIBLE_FORCE_COLOR: "1"
  PYTHON_VERSION: "3.12"
  GO_VERSION: "1.22"

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      ansible: ${{ steps.filter.outputs.ansible }}
      golang: ${{ steps.golang-check.outputs.enabled }}
      terraform: ${{ steps.filter.outputs.terraform }}
      devcontainer: ${{ steps.filter.outputs.devcontainer }}
      scripts: ${{ steps.filter.outputs.scripts }}
      python: ${{ steps.filter.outputs.python }}
    steps:
      - uses: actions/checkout@v5

      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            ansible:
              - 'playbooks/**'
              - 'roles/**'
              - 'collections/**'
              - 'requirements.yml'
              - 'ansible.cfg'
              - 'devcontainers/ansible/**'
            golang-files:
              - '**/*.go'
              - 'go.mod'
              - 'go.sum'
              - 'devcontainers/golang/**'
            terraform:
              - '**/*.tf'
              - 'terraform/**'
              - 'infrastructure/**'
              - 'devcontainers/terraform/**'
            devcontainer:
              - 'devcontainers/**'
              - '.devcontainer/**'
            scripts:
              - 'scripts/**'
            python:
              - '**/*.py'
              - 'requirements.txt'
              - 'tests/**'

      - name: Check Go module exists
        id: golang-check
        run: |
          if [ -f "go.mod" ] && [ "${{ steps.filter.outputs.golang-files }}" == "true" ]; then
            echo "enabled=true" >> $GITHUB_OUTPUT
          else
            echo "enabled=false" >> $GITHUB_OUTPUT
            echo "::notice::Go changes detected but no go.mod found, skipping Go CI"
          fi

  lint:
    name: Lint and Syntax Check
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.ansible == 'true'
    steps:
      - uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          # Don't use cache: 'pip' when using uv

      - name: Install uv
        uses: astral-sh/setup-uv@v7
        with:
          enable-cache: true

      - name: Install dependencies
        run: |
          uv pip install --system --requirement requirements.txt
          export PATH="$HOME/.local/bin:$PATH"
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Verify Ansible installation
        run: |
          which ansible
          ansible --version

      - name: Run yamllint
        run: yamllint .
        continue-on-error: true

      - name: Run ansible-lint
        run: ansible-lint --profile production
        continue-on-error: true

      - name: Ansible syntax check
        run: |
          shopt -s nullglob
          for playbook in playbooks/*.yml; do
            echo "Checking $playbook"
            ansible-playbook "$playbook" --syntax-check
          done

  test-playbooks:
    name: Test Playbooks
    runs-on: ubuntu-latest
    needs: [changes, lint]
    if: needs.changes.outputs.ansible == 'true'
    steps:
      - uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v7
        with:
          enable-cache: true

      - name: Cache Ansible collections
        uses: actions/cache@v4
        with:
          path: ~/.ansible/collections
          key: ansible-collections-${{ hashFiles('requirements.yml') }}
          restore-keys: ansible-collections-

      - name: Install dependencies
        run: |
          uv pip install --system --requirement requirements.txt
          export PATH="$HOME/.local/bin:$PATH"
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          ansible-galaxy collection install -r requirements.yml

      - name: Run test playbook
        run: |
          if [ -f "playbooks/test-environment.yml" ]; then
            ansible-playbook playbooks/test-environment.yml --check
          else
            echo "::warning::Test playbook not found, skipping"
          fi
        continue-on-error: true

  golang-ci:
    name: Golang CI
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.golang == 'true'
    steps:
      - uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Verify Go installation
        run: go version

      - name: Download dependencies
        run: go mod download

      - name: Check gofmt
        run: |
          unformatted=$(gofmt -l .)
          if [ -n "$unformatted" ]; then
            echo "::error::The following files need formatting:"
            echo "$unformatted"
            gofmt -d .
            exit 1
          fi

      - name: Run go vet
        run: go vet ./...

      - name: Run go test
        run: go test -v -race -coverprofile=coverage.txt ./...

      - name: Upload coverage
        if: always()
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.txt
          flags: golang
          fail_ci_if_error: false
        continue-on-error: true

  terraform-ci:
    name: Terraform Checks
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.terraform == 'true'
    steps:
      - uses: actions/checkout@v5

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Cache Terraform providers
        uses: actions/cache@v4
        with:
          path: ~/.terraform.d/plugin-cache
          key: terraform-${{ runner.os }}-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: terraform-${{ runner.os }}-

      - name: Terraform Format Check
        run: terraform fmt -recursive -check
        continue-on-error: true

      - name: Run Terraform validation
        run: |
          if [ -x "./scripts/run-terraform-tests.sh" ]; then
            ./scripts/run-terraform-tests.sh
          else
            echo "::warning::Terraform test script not found or not executable"
          fi
        continue-on-error: true

  script-lint:
    name: Script Lint
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.scripts == 'true'
    steps:
      - uses: actions/checkout@v5

      - name: Run shellcheck
        uses: ludeeus/action-shellcheck@master
        with:
          scandir: './scripts'
          severity: error
          ignore_paths: '*.ps1'
        continue-on-error: true

      - name: Lint PowerShell scripts
        if: hashFiles('scripts/*.ps1') != ''
        shell: pwsh
        run: |
          Install-Module PSScriptAnalyzer -Scope CurrentUser -Force
          $scripts = Get-ChildItem -Path scripts -Filter *.ps1
          foreach ($script in $scripts) {
            Write-Host "Analyzing $($script.Name)"
            Invoke-ScriptAnalyzer -Path $script.FullName -Recurse
          }
        continue-on-error: true

  dockerfile-lint:
    name: Dockerfile Lint
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.devcontainer == 'true'
    steps:
      - uses: actions/checkout@v5

      - name: Run hadolint on each Dockerfile
        run: |
          for stack in base ansible golang terraform latex; do
            if [ -f "devcontainers/$stack/Dockerfile" ]; then
              echo "Linting devcontainers/$stack/Dockerfile"
              docker run --rm -i hadolint/hadolint:latest hadolint \
                --format json \
                --failure-threshold error \
                - < "devcontainers/$stack/Dockerfile" > "$stack-hadolint.json" || true
            fi
          done
        continue-on-error: true

  devcontainer-build-base:
    name: Build Base Devcontainer
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    needs: [changes, dockerfile-lint]
    if: needs.changes.outputs.devcontainer == 'true'

    steps:
      - uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build base image
        uses: docker/build-push-action@v6
        with:
          context: devcontainers/base
          file: devcontainers/base/Dockerfile
          push: false
          load: true
          tags: devcontainer-base:ci
          cache-from: type=gha,scope=base
          cache-to: type=gha,mode=max,scope=base
          platforms: linux/amd64

      - name: Test base container
        run: |
          docker run --rm devcontainer-base:ci sh -c "echo 'Base container is healthy' && which bash"

      - name: Scan with Trivy
        uses: aquasecurity/trivy-action@0.33.1
        with:
          image-ref: devcontainer-base:ci
          severity: CRITICAL,HIGH
          ignore-unfixed: true
          format: sarif
          output: trivy-base.sarif
        continue-on-error: true

      - name: Upload Trivy SARIF
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('trivy-base.sarif') != ''
        with:
          sarif_file: trivy-base.sarif
          category: trivy-base

  devcontainer-build:
    name: Build Devcontainer (${{ matrix.stack }})
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    needs: [changes, dockerfile-lint, devcontainer-build-base]
    if: needs.changes.outputs.devcontainer == 'true'
    strategy:
      fail-fast: false
      matrix:
        stack: [ansible, golang, terraform, latex]

    steps:
      - uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build ${{ matrix.stack }} image
        uses: docker/build-push-action@v6
        with:
          context: devcontainers/${{ matrix.stack }}
          file: devcontainers/${{ matrix.stack }}/Dockerfile
          push: false
          load: true
          tags: devcontainer-${{ matrix.stack }}:ci
          cache-from: type=gha,scope=${{ matrix.stack }}
          cache-to: type=gha,mode=max,scope=${{ matrix.stack }}
          platforms: linux/amd64

      - name: Test ${{ matrix.stack }} container
        run: |
          echo "Testing ${{ matrix.stack }} container..."
          docker run --rm devcontainer-${{ matrix.stack }}:ci \
            sh -c "echo 'Container ${{ matrix.stack }} is healthy' && which bash"

      - name: Scan with Trivy
        uses: aquasecurity/trivy-action@0.33.1
        with:
          image-ref: devcontainer-${{ matrix.stack }}:ci
          severity: CRITICAL,HIGH
          ignore-unfixed: true
          format: sarif
          output: trivy-${{ matrix.stack }}.sarif
        continue-on-error: true

      - name: Upload Trivy SARIF
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('trivy-${{ matrix.stack }}.sarif') != ''
        with:
          sarif_file: trivy-${{ matrix.stack }}.sarif
          category: trivy-${{ matrix.stack }}

  devcontainer-cli-test:
    name: DevContainer CLI (${{ matrix.stack }})
    runs-on: ubuntu-latest
    needs: [changes, devcontainer-build]
    if: needs.changes.outputs.devcontainer == 'true'
    strategy:
      fail-fast: false
      matrix:
        stack: [ansible, golang, terraform, latex]

    steps:
      - uses: actions/checkout@v5

      - name: Cache npm packages
        uses: actions/cache@v4
        with:
          path: ~/.npm-global
          key: npm-devcontainers-${{ runner.os }}
          restore-keys: npm-devcontainers-

      - name: Install Dev Containers CLI
        run: |
          export NPM_CONFIG_PREFIX="$HOME/.npm-global"
          npm install --global @devcontainers/cli
          echo "$HOME/.npm-global/bin" >> $GITHUB_PATH

      - name: Verify devcontainer config
        run: |
          if [ -f "devcontainers/${{ matrix.stack }}/devcontainer.json" ]; then
            echo "Checking devcontainers/${{ matrix.stack }}/devcontainer.json"
            cat devcontainers/${{ matrix.stack }}/devcontainer.json | jq .
          else
            echo "::warning::No devcontainer.json found for ${{ matrix.stack }}"
          fi

      - name: Test devcontainer up
        run: |
          if [ -f "devcontainers/${{ matrix.stack }}/devcontainer.json" ]; then
            cd devcontainers/${{ matrix.stack }}
            devcontainer up --workspace-folder .
            devcontainer exec --workspace-folder . -- bash -c "echo '${{ matrix.stack }} container is running'"
            devcontainer stop --workspace-folder .
          fi
        continue-on-error: true

  unit-tests:
    name: Python Unit Tests
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.python == 'true'
    steps:
      - uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v7
        with:
          enable-cache: true

      - name: Install dependencies
        run: |
          uv pip install --system --requirement requirements.txt
          export PATH="$HOME/.local/bin:$PATH"
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Run pytest
        run: |
          if [ -d "tests" ] && [ -n "$(ls -A tests/*.py 2>/dev/null)" ]; then
            python -m pytest tests/ \
              --verbose \
              --tb=short \
              --maxfail=5 \
              -p no:ansible \
              || echo "::warning::Some pytest tests failed"
          else
            echo "No Python tests found, skipping"
          fi
        continue-on-error: true

  ansible-test:
    name: Ansible Test
    runs-on: ubuntu-latest
    needs: [changes, lint]
    if: needs.changes.outputs.ansible == 'true'
    steps:
      - uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v7
        with:
          enable-cache: true

      - name: Install dependencies
        run: |
          uv pip install --system --requirement requirements.txt
          export PATH="$HOME/.local/bin:$PATH"
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Run ansible-test
        run: |
          if [ -x "./scripts/run-ansible-tests.sh" ]; then
            ./scripts/run-ansible-tests.sh
          else
            echo "::warning::ansible-test script not found"
          fi
        env:
          ANSIBLE_TEST_PYTHON_VERSION: ${{ env.PYTHON_VERSION }}
        continue-on-error: true

  molecule:
    name: Molecule (${{ matrix.distro }})
    runs-on: ubuntu-latest
    needs: [changes, test-playbooks]
    if: |
      needs.changes.outputs.ansible == 'true' &&
      (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch')
    strategy:
      fail-fast: false
      matrix:
        distro: [debian12, ubuntu2204]

    steps:
      - uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v7
        with:
          enable-cache: true

      - name: Cache Ansible collections
        uses: actions/cache@v4
        with:
          path: ~/.ansible/collections
          key: ansible-collections-${{ hashFiles('requirements.yml') }}

      - name: Install dependencies
        run: |
          uv pip install --system --requirement requirements.txt
          export PATH="$HOME/.local/bin:$PATH"
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          ansible-galaxy collection install -r requirements.yml

      - name: Run Molecule
        run: |
          if command -v molecule &> /dev/null; then
            molecule test --scenario-name default
            if [ -d "molecule/latex" ]; then
              molecule test --scenario-name latex
            fi
          else
            echo "::warning::Molecule not installed"
          fi
        env:
          MOLECULE_DISTRO: ${{ matrix.distro }}
          MOLECULE_IMAGE: geerlingguy/docker-${{ matrix.distro }}-ansible:latest
        continue-on-error: true

  scenario-tests:
    name: Scenario Tests
    runs-on: ubuntu-latest
    needs: [changes, devcontainer-build]
    if: |
      github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v5

      - name: Set up Terraform
        if: needs.changes.outputs.terraform == 'true'
        uses: hashicorp/setup-terraform@v3

      - name: Run Terraform scenario
        if: needs.changes.outputs.terraform == 'true'
        run: |
          if [ -x "./scripts/scenarios/run-terraform-proxmox.sh" ]; then
            ./scripts/scenarios/run-terraform-proxmox.sh
          fi
        continue-on-error: true

      - name: Run LaTeX scenario
        run: |
          if [ -x "./scripts/scenarios/run-latex-cv.sh" ]; then
            ./scripts/scenarios/run-latex-cv.sh
          fi
        continue-on-error: true

  publish-base:
    name: Publish Base to GHCR
    runs-on: ubuntu-latest
    needs: [changes, devcontainer-build-base]
    if: |
      github.event_name == 'push' &&
      github.ref == 'refs/heads/main' &&
      needs.changes.outputs.devcontainer == 'true'
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write

    steps:
      - uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/devcontainer-base
          tags: |
            type=raw,value=latest
            type=raw,value=py312
            type=sha

      - name: Build and push base
        id: build
        uses: docker/build-push-action@v6
        with:
          context: devcontainers/base
          file: devcontainers/base/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=base
          cache-to: type=gha,mode=max,scope=base
          platforms: linux/amd64
          provenance: true
          sbom: true

      - name: Attest
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ghcr.io/${{ github.repository }}/devcontainer-base
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

  publish-containers:
    name: Publish ${{ matrix.stack }} to GHCR
    runs-on: ubuntu-latest
    needs: [changes, devcontainer-build, publish-base]
    if: |
      github.event_name == 'push' &&
      github.ref == 'refs/heads/main' &&
      needs.changes.outputs.devcontainer == 'true'
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    strategy:
      fail-fast: false
      matrix:
        stack: [ansible, golang, terraform, latex]

    steps:
      - uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/devcontainer-${{ matrix.stack }}
          tags: |
            type=raw,value=latest
            type=sha

      - name: Build and push ${{ matrix.stack }}
        id: build
        uses: docker/build-push-action@v6
        with:
          context: devcontainers/${{ matrix.stack }}
          file: devcontainers/${{ matrix.stack }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.stack }}
          cache-to: type=gha,mode=max,scope=${{ matrix.stack }}
          platforms: linux/amd64
          provenance: true
          sbom: true

      - name: Attest
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ghcr.io/${{ github.repository }}/devcontainer-${{ matrix.stack }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

  devcontainer-ghcr-test:
    name: Test GHCR Image (${{ matrix.stack }})
    runs-on: ubuntu-latest
    needs: publish-containers
    if: github.ref == 'refs/heads/main'
    strategy:
      fail-fast: false
      matrix:
        stack: [ansible, terraform, golang, latex]

    steps:
      - uses: actions/checkout@v5

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Test published GHCR image
        run: |
          docker pull ghcr.io/${{ github.repository }}/devcontainer-${{ matrix.stack }}:latest
          docker run --rm ghcr.io/${{ github.repository }}/devcontainer-${{ matrix.stack }}:latest \
            sh -c "echo 'GHCR ${{ matrix.stack }} image healthy'"

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v5

      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@0.33.1
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true

      - name: Upload Trivy SARIF
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          category: trivy-fs

  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs:
      - changes
      - lint
      - test-playbooks
      - golang-ci
      - terraform-ci
      - script-lint
      - dockerfile-lint
      - devcontainer-build-base
      - devcontainer-build
      - unit-tests
    if: always()
    steps:
      - name: Check results
        run: |
          echo "Checking CI results..."
          results='${{ toJSON(needs) }}'
          echo "$results" | jq .

          failed=$(echo "$results" | jq -r '
            to_entries[]
            | select(.value.result == "failure")
            | .key
          ')

          if [ -n "$failed" ]; then
            echo "::error::Failed jobs: $failed"
            exit 1
          fi

          echo "✅ CI passed!"
